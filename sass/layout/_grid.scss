.row {
	// This means that it will fill 100% of the screen if the viewport width is lower or equal to the grid width. Otherwise will stop filling the screen.
	max-width: $grid-width;

	// This is a trick to center block elements inside block elements;
	// This will center the row in the middle of the screen
	margin: 0 auto;

	// This will apply to all .rows except the last .row
	// :last-child will only work if all the .row are in a container
	&:not(:last-child) {
		margin-bottom: $gutter-vertical;
	}

	// Need this clearfix because all of the elements will be floated
	@include clearfix;

	// ^= means select if the attribute "starts with"
	// $= means select if the attribute "ends with"
	// *= means select if the attribute "contains with"
	[class^="col-"] {
		// Floating will take it out of normal flow and hence collapse the height of the container
		float: left;
		&:not(:last-child) {
			margin-right: $gutter-horizontal;
		}
	}

	.col-1-of-2 {
		// Need to use #{...} when referencing a scss variable inside calc
		width: calc((100% - #{$gutter-horizontal}) / 2);
	}

	.col-1-of-3 {
		width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
	}

	.col-2-of-3 {
		width: calc(
			(2 * (100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal}
		);
	}

	.col-1-of-4 {
		width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
	}

	.col-2-of-4 {
		width: calc(
			(2 * (100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal}
		);
	}

	.col-3-of-4 {
		width: calc(
			(3 * (100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal}
		);
	}
}
